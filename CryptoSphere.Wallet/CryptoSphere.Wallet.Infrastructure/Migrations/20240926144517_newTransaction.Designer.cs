// <auto-generated />
using System;
using CryptoSphere.Wallet.Infrastructure.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoSphere.Wallet.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20240926144517_newTransaction")]
    partial class newTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.CryptoCoin", b =>
                {
                    b.Property<Guid>("CoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoinSymbol")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ValueInUSD")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WalletId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoinId");

                    b.HasIndex("WalletId");

                    b.HasIndex("WalletId1");

                    b.ToTable("Cryptos");

                    b.HasData(
                        new
                        {
                            CoinId = new Guid("aa81f025-f94e-4f15-b4b8-817338c86962"),
                            CoinSymbol = 1,
                            Quantity = 1m,
                            ValueInUSD = 20.05m,
                            WalletId = new Guid("0af009c4-0577-4aa0-aaaa-cdc49d9b4a1c")
                        },
                        new
                        {
                            CoinId = new Guid("630ee9d4-3ee7-4e55-a3f4-54f64bef6ed3"),
                            CoinSymbol = 3,
                            Quantity = 12m,
                            ValueInUSD = 84.05m,
                            WalletId = new Guid("0af009c4-0577-4aa0-aaaa-cdc49d9b4a1c")
                        });
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("ExchangeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RateToUSD")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("CryptoId");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            ExchangeRateId = new Guid("25daf56e-47c8-4c7a-a789-b26f4d496054"),
                            CryptoId = new Guid("aa81f025-f94e-4f15-b4b8-817338c86962"),
                            LastUpdated = new DateTime(2024, 9, 26, 14, 45, 15, 881, DateTimeKind.Utc).AddTicks(3964),
                            RateToUSD = 11002.25m
                        });
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CoinSymbol")
                        .HasColumnType("int");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 9, 26, 16, 45, 15, 883, DateTimeKind.Local).AddTicks(3570));

                    b.Property<int>("TransactionStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("CryptoId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = new Guid("8418ee6b-90a9-4b0d-9da3-265dea4c590e"),
                            Amount = 23.50m,
                            CoinSymbol = 0,
                            CryptoId = new Guid("aa81f025-f94e-4f15-b4b8-817338c86962"),
                            TransactionDate = new DateTime(2024, 9, 26, 16, 45, 15, 883, DateTimeKind.Local).AddTicks(5053),
                            TransactionStatus = 1,
                            TransactionType = 0,
                            WalletId = new Guid("0af009c4-0577-4aa0-aaaa-cdc49d9b4a1c")
                        },
                        new
                        {
                            TransactionId = new Guid("621cfe6b-522b-4c4e-8a70-3b4862397fad"),
                            Amount = 60.50m,
                            CoinSymbol = 3,
                            CryptoId = new Guid("630ee9d4-3ee7-4e55-a3f4-54f64bef6ed3"),
                            TransactionDate = new DateTime(2024, 9, 26, 16, 45, 15, 883, DateTimeKind.Local).AddTicks(5111),
                            TransactionStatus = 0,
                            TransactionType = 1,
                            WalletId = new Guid("0af009c4-0577-4aa0-aaaa-cdc49d9b4a1c")
                        });
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BalanceUSD")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(100000m);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 9, 26, 14, 45, 15, 884, DateTimeKind.Utc).AddTicks(1057));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletStatus")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            WalletId = new Guid("0af009c4-0577-4aa0-aaaa-cdc49d9b4a1c"),
                            BalanceUSD = 100000m,
                            CreatedAt = new DateTime(2024, 9, 26, 14, 45, 15, 884, DateTimeKind.Utc).AddTicks(1488),
                            UpdatedAt = new DateTime(2024, 9, 26, 16, 45, 15, 884, DateTimeKind.Utc).AddTicks(1489),
                            UserId = new Guid("7b6e1283-4372-4d77-be5e-7f61aae6632e"),
                            WalletAddress = "---TestAddress---",
                            WalletStatus = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.CryptoCoin", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.Wallet", "Wallet")
                        .WithMany("CryptoCoins")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoSphere.Wallet.Entities.Wallet", null)
                        .WithMany("Cryptos")
                        .HasForeignKey("WalletId1");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.ExchangeRate", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.CryptoCoin", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.Transaction", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.CryptoCoin", "Coin")
                        .WithMany("Transactions")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoSphere.Wallet.Entities.Wallet", "Wallet")
                        .WithMany("Transaction")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoSphere.Wallet.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CryptoSphere.Wallet.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.CryptoCoin", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CryptoSphere.Wallet.Entities.Wallet", b =>
                {
                    b.Navigation("CryptoCoins");

                    b.Navigation("Cryptos");

                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
